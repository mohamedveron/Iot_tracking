/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import com.vodafone.iot.tracking.client.model.Device;
import com.vodafone.iot.tracking.client.model.DeviceDetails;
import com.vodafone.iot.tracking.client.model.SIMCard;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-05T18:10:36.942+02:00[Africa/Cairo]")

@Validated
@Api(value = "devices", description = "the devices API")
public interface DevicesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /devices/{id} : Accepts sim card data to add it to device.
     * Configure device.
     *
     * @param id pass an device id to add sim card (required)
     * @param siMCard configureDevice request data. (optional)
     * @return device Configured (status code 200)
     *         or invalid input, object invalid (status code 400)
     */
    @ApiOperation(value = "Accepts sim card data to add it to device.", nickname = "configureDevice", notes = "Configure device.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "device Configured"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @RequestMapping(value = "/devices/{id}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> _configureDevice(@ApiParam(value = "pass an device id to add sim card",required=true) @PathVariable("id") Long id,@ApiParam(value = "configureDevice request data."  )  @Valid @RequestBody(required = false) SIMCard siMCard) {
        return configureDevice(id, siMCard);
    }

    // Override this method
    default  ResponseEntity<Void> configureDevice(Long id, SIMCard siMCard) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /devices/ : Accepts device data to create device.
     * Create new device.
     *
     * @param device createDevice request data. (optional)
     * @return device created (status code 201)
     *         or invalid input, object invalid (status code 400)
     *         or an existing item already exists (status code 409)
     */
    @ApiOperation(value = "Accepts device data to create device.", nickname = "createDevice", notes = "Create new device.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "device created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/devices/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> _createDevice(@ApiParam(value = "createDevice request data."  )  @Valid @RequestBody(required = false) Device device) {
        return createDevice(device);
    }

    // Override this method
    default  ResponseEntity<Void> createDevice(Device device) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /devices/pending : get device waiting for activation .
     * Get Pending Devices .
     *
     * @return devices returned (status code 200)
     *         or invalid input, object invalid (status code 400)
     */
    @ApiOperation(value = "get device waiting for activation .", nickname = "getPendingDevices", notes = "Get Pending Devices .", response = DeviceDetails.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "devices returned", response = DeviceDetails.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @RequestMapping(value = "/devices/pending",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DeviceDetails>> _getPendingDevices() {
        return getPendingDevices();
    }

    // Override this method
    default  ResponseEntity<List<DeviceDetails>> getPendingDevices() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /devices/ready : get device ready for sale .
     * Get Ready Devices .
     *
     * @return devices returned (status code 200)
     *         or invalid input, object invalid (status code 400)
     */
    @ApiOperation(value = "get device ready for sale .", nickname = "getReadyDevices", notes = "Get Ready Devices .", response = DeviceDetails.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "devices returned", response = DeviceDetails.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @RequestMapping(value = "/devices/ready",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<DeviceDetails>> _getReadyDevices() {
        return getReadyDevices();
    }

    // Override this method
    default  ResponseEntity<List<DeviceDetails>> getReadyDevices() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /devices/{id} : Accepts device data to update the device configration status.
     * Update device.
     *
     * @param id pass an device id to update sim card status (required)
     * @param device UpdateDevice request data. (optional)
     * @return device updated (status code 201)
     *         or invalid input, object invalid (status code 400)
     */
    @ApiOperation(value = "Accepts device data to update the device configration status.", nickname = "updateDevice", notes = "Update device.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "device updated"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @RequestMapping(value = "/devices/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> _updateDevice(@ApiParam(value = "pass an device id to update sim card status",required=true) @PathVariable("id") Long id,@ApiParam(value = "UpdateDevice request data."  )  @Valid @RequestBody(required = false) Device device) {
        return updateDevice(id, device);
    }

    // Override this method
    default  ResponseEntity<Void> updateDevice(Long id, Device device) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
