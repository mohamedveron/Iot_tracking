openapi: 3.0.0
info:
  description: >-
    IOT Tracking API definition that is used as a contract between Frontend and
    backend
  version: 1.0.2-oas3
  title: IOT Tracking API
  contact:
    email: mohamedveron23@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:

  /devices/:
    post:   
      summary: >-
        Accepts pilot data to create account and register.
      operationId: createPilot
      description: Register new pilot.
      requestBody:
        description: RegisterPilotPost request data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: pilot created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
          
    put:   
      summary: >-
        Accepts pilot data to update the account and compelete all details.
      operationId: UpdatePilot
      description: Update pilot.
      requestBody:
        description: UpdatePilotPost request data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: pilot updated
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists      
   
                 
  /devices/pending:        
    get:
      summary: >-
        Accepts pilot .
      operationId: getPilot
      description: Get pilot .
          
      responses:
        '200':
          description: item returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDetails'
          
        '400':
          description: 'invalid input, object invalid'
  
  /devices/ready:        
    get:
      summary: >-
        Accepts pilot id.
      operationId: getPilotById
      description: Get specific pilot .
      parameters:
      - name: id
        in: path
        description: pass an pilot id to get his data
        required: true
        schema:
          type: integer
          format: int64    
      responses:
        '200':
          description: item returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          
        '400':
          description: 'invalid input, object invalid'                               
      
components:    
  schemas:
  
    DeviceDetails: 
      allOf:
        - $ref: '#/components/schemas/Device'
        - required:
          - id
          - SIMCard
        - type: object  
          properties:
            id:
              type: integer
              format: int64
            SIMCard:
              type: object
              $ref: '#/components/schemas/SIMCard'  
  
    Device: 
      required:
      - temperature
      type: object
      properties:
        status:
          type: string
          example: ready
        temperature:
          type: number
          example: -25.
    
    SIMCard: 
      required:
      - Id
      type: object
      properties:
        Id:
          type: integer
          format: int64
        operatorCode:
          type: string
          example: true
        status:
          type: string
          example: active
        country:
          type: string
          example: Egypt     
  